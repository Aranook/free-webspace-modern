name: Deploy Web App to GitHub Pages

on:
  push:
    branches:
      - main  # Déclenche le workflow sur chaque push vers la branche 'main'
  workflow_dispatch:  # Permet d'exécuter manuellement le workflow via l'onglet Actions

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job de construction du projet
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout le code source du dépôt
      - name: Checkout repository
        uses: actions/checkout@v4

      # Initialiser et installer les dépendances
      - name: Initialize project and install dependencies
        run: |
          npm init -y
          npm install react react-dom react-scripts

          # Créer les fichiers nécessaires pour une app React basique
          mkdir -p public src
          echo '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>React App</title></head><body><div id="root"></div></body></html>' > public/index.html
          echo 'import React from "react"; import ReactDOM from "react-dom"; import "./index.css"; import App from "./App"; ReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById("root"));' > src/index.js
          echo 'import React from "react"; const App = () => <div>Welcome to React!</div>; export default App;' > src/App.js
          echo 'body { font-family: Arial, sans-serif; margin: 0; padding: 0; }' > src/index.css

      # Ajouter le script de build dans package.json
      - name: Add build script
        run: |
          jq '.scripts.build="react-scripts build"' package.json > temp.json && mv temp.json package.json

      # Lancer le build de l'application
      - name: Build the project
        run: npm run build

      # Vérifier les fichiers générés
      - name: Verify build output
        run: |
          if [ -d build ]; then
            echo "Build completed successfully. Contents:"
            ls -l build
          else
            echo "Build directory not found!"
            exit 1
          fi

      # Sauvegarder le dossier build pour le déploiement
      - name: Save build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build

  # Job de déploiement sur GitHub Pages
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Checkout le dépôt
      - name: Checkout repository
        uses: actions/checkout@v4

      # Télécharger le dossier de build sauvegardé
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build

      # Préparer la branche gh-pages
      - name: Setup gh-pages branch
        run: |
          git fetch origin gh-pages || echo "La branche gh-pages n'existe pas, elle sera créée."
          git checkout gh-pages || git checkout --orphan gh-pages
          git reset --hard
          git clean -fdx

      # Copier les fichiers de build vers la racine
      - name: Deploy files to gh-pages
        run: |
          cp -r build/* .
          rm -rf build  # Nettoyage après copie

      # Configurer Git, committer et pousser les changements
      - name: Commit and push to gh-pages
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Déploiement GitHub Pages" || echo "Aucun changement à committer"
          git push origin gh-pages --force

      # Récupérer l'URL de la page déployée et afficher un lien cliquable
      - name: Provide link to deployed site
        run: |
          echo "Site déployé avec succès ! Vous pouvez accéder à la page à l'adresse suivante :"
          echo "${{ steps.deployment.outputs.page_url }}"
